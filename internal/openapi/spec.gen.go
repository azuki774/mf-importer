// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SW32/bNhDH/xXhtocNUGon7ZMe2wxbVmANAgx7SIyAk84WU/5QyFNnw/D/PhwpWdIs",
	"u06cZuiLIJA88u7zPd5xDbnVlTVoyEO2Bp+XqEX4vUQSUvFf5WyFjiSGcVnwl1YVQgbSEC7QwSYFqSvr",
	"6FIQ8vzcOi0IMigE4RlJjZC2Rp6cNIvO5ve6WODTDI3Q2HOjm6iczHHcQYcL6Z/oYO3HHdtdGw54rKXD",
	"ArJbptRZN/623g1cmaVAkhRvdRVodFvbvx8wJ3bjpla4q0QuCBfWre6jJLgUulI8dXtxPp2lIwhwKXK6",
	"14Lyki20WEpda8jOU9DSxP/pmOFcoiruW+q9k2JkszFt9+TJF6HqMe3GAPaObQ3TQdjDkHosf1mSEzkF",
	"cHuA3uBjjZ6+yvX/xXgkrhch1RLZAcanSTO3oUTUWgu3ggyg20TP41VGdyYqyS6g89IayOD8zZTjsBUa",
	"nsrg7RseSqESVAbekyKUmvC/wCAIyyFIWnNVQAa/Il02S9jMCY2EjrmtQfIZjzW6VXvNMlBSS44iVrMx",
	"DTczxucra3zU/GI6DdJbQ2iCC6KqlMyDE5MHz6GsextKQh0Mf3Q4hwx+mHSFdNJU0UlTQjdbnsI5sYo4",
	"C/S5kxVFSEFPj+5LG1btFGRQElXZZKJsLlRpPWVvp9MpsPOdCgukpAXIu7Q0J2tZbNjDAhXGEjakehnG",
	"G7BXxR60rFJHNiRSl3fkanwi5nfRpX7wf9jkQ8P9+Rhu/7q6niUx1oYHg/9KPr1a2E/LrmOSajeJPn08",
	"mV+XTKGZthVuiO+ahw8AHHoVbTFhlMlPdwwG6Q6y5IHbflJKT9atkjD8M6SjF9pWeIwAXW18ORVDRXxv",
	"i9VQwFh/dyXeVSSFd2NT70WRNPX2zt2ZP81nY/8xSZ/WyWrmpTALTDwJqn2rawrLM47RGaEgmwvlMZSN",
	"EoWi8lAN/i2uOEAFCJc0qZSQZtjgOPq5qFVY1LS0bb5uFdiu4al00B8/fRzpjpv/qvBsXjH4JC8x/xyr",
	"aMzL5kWwl8h20Qv50d3C2E/5esQDglOuVocdugkLXqO3hZfVEZ3tpKLEIIRSCcY3ShLj58pk/QiAa+t7",
	"BPbl6PNLb/+NtJt8cDE9f9GjxnB+cCgIixOYiqIY8Oxl1pFPhoD4W3bO42vut3pNNO8I1yT5wev2Hb4h",
	"9mXXyZfVbTc+fo/NvwEAAP//uioNLoUQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
