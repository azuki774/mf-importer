// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SWzW7jNhDHX0WY9tACykrJ7knH3RRtukA3CFD0kBgBK40tZvkVcrS1YfjdC5KSJdWy",
	"4yRuil4EgeSQM7//cIZrKLU0WqEiB8UaXFmjZOH3Eolx4f+M1QYtcQzjvPJfWhmEArgiXKCFTQpcGm3p",
	"khH6+bm2khEUUDHCM+ISIe2MHFmuFr3Nr021wOcZKiZx4EY/YSwvcdpBiwvunulg46Yd210bDnhsuMUK",
	"iltPqbdu/e28G7kyS4E4Cb/VVaDRb63/fMCSvBs3jcBdJUpGuNB2dR8lwSWTRvip24vzfJZOIMAlK+le",
	"MiprbyHZkstGQnGeguQq/udThnOOorrvqA9OipHNprTdkyffmGimtJsCODi2M0xHYY9DGrD8aUmWlRTA",
	"7QF6g48NOnqS63+L8UhcJyHVEdkB5k/jaq5DiWikZHYFBUC/iZzHq4z2jBnuXUDruFZQwPm73MehDSo/",
	"VcD7d34oBcOoDryzKpSa8L/AIIiXgxHX6qqCAn5GumyXeDPLJBJaz20N3J/x2KBdddesAMEl91HEajal",
	"4Wbm8TmjlYuaX+R5kF4rQhVcYMYIXgYnsgfnQ1kPNuSEMhh+b3EOBXyX9YU0a6to1pbQzZYns5atIs4K",
	"XWm5oQgp6OnQfuvCaqyAAmoiU2SZ0CUTtXZUvM/zHLzzvQoLpKQD6HfpaGZrXm28hxUKjCVsTPUyjLdg",
	"r6o9aL1KPdmQSH3ekW3wmZg/RJeGwf+mk08t95djuP3j6nqWxFhbHh78E/n0ZmE/L7uOSardJPry+dX8",
	"+mQKzbSrcGN81374AMCxV9EWE48y+eHOg0G6gyJ58G0/qbkjbVdJGP4R0skLrQ0eI0BfG0+nYqiIH3W1",
	"GgsY6++uxLuKpPBhauojq5K23t7ZO/W7+qr0XyoZ0nq1mmXN1AITR4wa1+mawvLMx2gVE1DMmXAYykaN",
	"TFB9qAb/ElccoAKES8qMYFyNG5yPfs4aERa1LW2br1sFtmv8VDrqj18+T3THzT9VeDGvGHxS1lh+jVU0",
	"5mX7IthLZLvoRH70tzD2U3894gHBKduIww7dhAVv0dvCy+qIznaiosSESDC+VJJIwdcn7SYwXGs34LAv",
	"U19egIcvpd0UhIv8/KRHTUH9ZJERVq8my6pqRHWQZUc+HwLof7OLHl9/3+RlYdu0P3gB/4evin2ZdqLr",
	"a7fbH7/T5u8AAAD////r/6OdEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
