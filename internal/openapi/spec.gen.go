// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SWUW/bNhDHv4pw28MGKJWS9kmPbYYtK9YGAYY9JH7gpLPFlCIV8tTZMPzdhyMlS5pl",
	"147TDn0RBJJH3v3+xzuuITdVbTRqcpCtweUlVsL/XiMJqfivtqZGSxL9uCz4S6saIQOpCRdoYRODrGpj",
	"6VoQ8vzc2EoQZFAIwguSFULcGTmyUi96m9+bYoGnGWpR4cCNfqK2MsdpBy0upDvRwcZNO7a71h/w1EiL",
	"BWT3TKm3bv3tvBu5MouBJCne6sbT6Lc2fz9iTuzGXaNwV4lcEC6MXd14RXApqlrxzP3VZTqLJwjgUuT0",
	"h6C8ZINKLGXVVJBdxlBJHf7TKbu5RFV8aJEPzglhzaaE3ZMkn4VqpoSbotef2tnFw5BH4Qwo/rIkK3Ly",
	"yPagvMOnBh19iej/CfBIUOcz6ljsoOKjpJ4bXxaaqhJ2BRlAv0k1D9cX7YWoJTuA1kmjIYPLVykHYWrU",
	"PJXB61c8FEMtqPSkk8KXF/+/QC8FCyFIGs304Vek63YJm1lRIaFlaGuQfMZTg3bVXa0MlKwkRxEq2JR8",
	"mxmzc7XRLqh9laZedKMJtXdB1LWSuXcieXQcynqwoSSsvOGPFueQwQ9JXzyTtnImbdncbHkKa8Uq4CzQ",
	"5VbWFCB5MR3az11YjVWQQUlUZ0miTC5UaRxlr9M0BXa+V2GBFHUAeZeOZrKWxYY9LFBhKFtjqtd+vAXr",
	"E2QKLavUk/WXsU86sg2eiPlNcGkY/AcTvWu5Px/D/V83t7MoxNryYPBfyKdvFvZp2XVMUu0m0cf3Z/Pr",
	"k8k30K66jfHd8vABgGOvgi1GjDL66YHBID1AFj1yq49K6cjYVeSHf4Z48kKbGo8RoC+ML6eir4hvTbEa",
	"CxiK767Eu4rE8GZq6q0oorbePtgH/af+pM0/OhrSOlvNvBR6gZEjQY3rdI1hecExWi0UZHOhHPqyUaJQ",
	"VB6qwb+FFQeoAOGSkloJqcfdjaOfi0b5RW0/2+brVoHtGp6KR83x4/uJ1rj5rwrP5hWCj/IS80+hioa8",
	"bN8Ce4lsF72QH/0tDP2Ur0c4wDtlG3XYoTu/4Fv0Nv+mOqKznVWUGIRQKsLwRolC/FyZjJsAcGvcgMC+",
	"HH1+6R2+kXaTD67Syxc9agrnO4uCsDiDqSiKEc9BZh35ZPCIv2bnPL7mfq3XRPuOsG2SH7xu3+EbYl92",
	"nX1Z7Xbj4/fY/BsAAP//9X/++nkQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
