// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SWUW/bNhDHv4pw28MGKJWS9kmPbYYtK9YGAYY9JH7gpLPFlCIV8tTZMPzdhyMlS5pl",
	"147TDn0RBJJH3v3u+D+uITdVbTRqcpCtweUlVsL/XiMJqfivtqZGSxL9uCz4S6saIQOpCRdoYRODrGpj",
	"6VoQ8vzc2EoQZFAIwguSFULcGTmyUi96m9+bYoGnGWpR4cCNfqK2MsdpBy0upDvRwcZNO7a71h/w1EiL",
	"BWT3TKm3bv3tvBu5MouBJCne6sbT6Lc2fz9iTuzGXaNwNxO5IFwYu7rxGcGlqGrFM/dXl+ksniCAS5HT",
	"H4Lykg0qsZRVU0F2GUMldfhPp+zmElXxoUU+OCeENZtK7J4i+SxUM5W4KXr9qZ1dPAx5FM6A4i9LsiIn",
	"j2wPyjt8atDRl4j+nwCPBHU+o47FDio+Suq58bLQVJWwK8gA+k2qebi+aC9ELdkBtE4aDRlcvko5CFOj",
	"5qkMXr/ioRhqQaUnnRReXvz/An0qOBGCpNFMH35Fum6XsJkVFRJahrYGyWc8NWhX3dXKQMlKchRBwabS",
	"t5kxO1cb7UK2r9LUJ91oQu1dEHWtZO6dSB4dh7IebCgJK2/4o8U5ZPBD0otn0ipn0srmZstTWCtWAWeB",
	"LreypgDJJ9Oh/dyF1VgFGZREdZYkyuRClcZR9jpNU2Dn+ywskKIOIO/S0UzWstiwhwUqDLI1pnrtx1uw",
	"vkCm0HKWerL+MvZFR7bBEzG/CS4Ng/9gonct9+djuP/r5nYWhVhbHgz+C/X0zcI+rbqOKardIvr4/mx+",
	"fTH5Btqp2xjfLQ8fADj2KthixCijnx4YDNIDZNEjt/qolI6MXUV++GeIJy+0qfGYBPTC+HJZ9Ir41hSr",
	"cQKD+O6meDcjMbyZmnoriqjV2wf7oP/Un7T5R0dDWmdkMy+FXmDkSFDjuozGsLzg6KwWCrK5UA69YJQo",
	"FJWH1Pe3sOIADyBcUlIrIfW4r3Hcc9Eov6jtZNtK3bLfruGpeNQWP76faIqb//J/NqkQfJSXmH8K+hkq",
	"sn0F7CWyXfRCfvT3L3RSvhjhAO+UbdRhh+78gm/R1fxr6oiedpYcMQihVIThdRKF+FmTjJsAcGvcgMC+",
	"Gn2+6A5fR7vFB1fp5YseNYXznUVBWJzBVBTFiOegso58LHjEX7NnHq+2X+sd0b4gbFvkB6/bd/h62Fdd",
	"Z19Wu934+D02/wYAAP//jR5WPXMQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
