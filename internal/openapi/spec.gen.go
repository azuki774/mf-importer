// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SWz27jNhDGX0WY9tACylrJ7knH3RRtukA3CFD0kBgBK40tZvlHIUdbG4bfvRhSsqRa",
	"zjqJkV4Mg+SQM79v+FEbKKyurUFDHvIN+KJCLcLfSyQhFf+rna3RkcQwLkv+pXWNkIM0hEt0sE1B6to6",
	"uhSEPL+wTguCHEpBeEZSI6RdkCcnzbKP+b0pl/i8QCM0DtLoJ2onC5xO0OFS+mcm2PjpxPbXhgMeG+mw",
	"hPyWKfXRbb5ddqNU5imQJMVbXQUa/db27wcsiNO4aRTuK1EIwqV16/soCa6ErhVP3V6cZ/N0AgGuREH3",
	"WlBRcYQWK6kbDfl5Clqa+D+bClxIVOV9R31wUqxsPqXtgT75JlQzpd0UwMGxXWA6Kntc0oDlLytyoqAA",
	"7gDQG3xs0NN3uf6/GI/EdRJSHZE9YHyaNAsbLKLRWrg15AD9JnoRrzK6M1FLTgGdl9ZADufvMq7D1mh4",
	"Kof373gohVpQFXjPymA14f8SgyAshyBpzVUJOfyKdNku4TAnNBI65rYByWc8NujW3TXLQUktuYroZlMa",
	"bueMz9fW+Kj5RZYF6a0hNCEFUddKFiGJ2YPnUjaDDSWhDoE/OlxADj/MeiOdtS46ay10u+MpnBPriLNE",
	"XzhZU4QU9PTovnVlNU5BDhVRnc9myhZCVdZT/j7LMuDkexWWSEkHkHfpaM42stxyhiUqjBY2pnoZxluw",
	"V+UBtKxSTzY0Ut935Bp8JuYPMaVh8X/Y5FPL/eUYbv+6up4nsdaWB4P/Tj+9WdnP665jmmq/ib58fjW/",
	"vpnCY9o53BjfNQ8/AXCcVYzFhFEmP90xGKQ7yJMHfvaTSnqybp2E4Z8hnbzQtsZjBOi98XQqBkf8aMv1",
	"WMDov/sS7yuSwoepqY+iTFq/vXN35k/z1dh/TDKk9Wo1i0qYJSaeBDW+0zWF1RnX6IxQkC+E8hhso0Kh",
	"qHrKg3+LK56gAoQrmtVKSDN+4Lj6hWhUWNQ+abt+3SmwW8NT6eh9/PJ54nXc/leFF/OKxSdFhcXX6KKx",
	"L9svgoNEdotOlEd/C+N7ytcjHhCSco16OqGbsOAt3rbwZXXEy3YiUxJKJRi/VJJIgf3J+gkM19YPOBzq",
	"1Jcb8PBLab8F4SI7P+lRU1A/ORSE5avJirIcUY1nHb/j9t8AAAD//9HCJrtADgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
